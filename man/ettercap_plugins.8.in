.\"  ettercap_plugins -- man page for all the plugins
.\"
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\"  You should have received a copy of the GNU General Public License
.\"  along with this program; if not, write to the Free Software
.\"  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
.\"
.\"  $Id: ettercap_plugins.8.in,v 1.14 2003/11/18 17:53:35 alor Exp $
.\"
.de Sp
.if n .sp
.if t .sp 0.4
..
.TH ETTERCAP-PLUGINS "8" "" "ettercap @VERSION@"
.SH NAME
.B ettercap-plugins @VERSION@ \- A collection of plugins for ettercap

.SH DESCRIPTION
Ettercap(8) supports loadable modules at runtime. They are called plugins and
they come within the source tarball. They are automatically compiled if your
system supports them or until you specify the --disable-plugins option to the
configure script.

.TP
To have a list of plugins installed in your system do that command:
.Sp
.I ettercap -P list

.LP
.LP
The following is a list of available plugins:

.TP 
.B chk_poison
.Sp
It performs a check to see if the arp poisoning module of ettercap was successful.
It sends spoofed ICMP ehco packets to all the victims of the poisoning 
pretending to be each of the other targets. If we can catch an ICMP reply with
our MAC address as destination it means that the poisoning between those
two targets is successful. It checks both ways of each communication.
This plugin makes sense only where poisoning makes sense.
The test fails if you specify only one target in silent mode.
You can't run this plugin from command line because the poisoning process
is not started yet. You have to launch it from the proper menu.

.TP 
.B dummy
.Sp
Only a template to demonstrate how to write a plugin.

.TP 
.B find_conn
.Sp
Very simple plugin that listens for arp requests to show you all the targets an host
wants to talk to.
.Sp
.I example :
.Sp
ettercap -TQzP find_conn 


.TP 
.B finger
.Sp
Uses the passive fingerprint capabilities to fingerprint a remote host. It
does a connect() to the remote host to force the kernel to reply
to the SYN with a SYN+ACK packet. The reply will be collected and the
fingerprint is displayed. The connect() obey to the connect_timeout parameter
in etter.conf(5). You can specify a target on command-line or let the plugin ask
the target host to be fingerprinted. You can also specify multiple target with
the usual multi-target specification (see ettercap(8)). if you specify multiple
ports, all the ports will be tested on all the IPs.
.Sp
.I example :
.Sp
ettercap -TzP finger /192.168.0.1/22
.br
ettercap -TzP finger /192.168.0.1-50/22,23,25


.TP 
.B finger_submit
.Sp
Use this plugin to submit a fingerprint to the ettercap website. If you found
an unknown fingerprint, but you know for sure the operating system of the
target, you can submit it so it will be inserted in the database in the next
ettercap release. We need your help to increase the passive fingerprint
database. Thank you very much.
.Sp
.I example :
.Sp
ettercap -TzP finger_submit


.TP 
.B link_type
.Sp
It performs a check of the link type (hub or switch) by sending a spoofed ARP
request and listening for replies. It needs at least one entry in the host 
list to perform the check. With two or more hosts the test will be more 
accurate.
.Sp
.I example :
.Sp
ettercap -TQP link_type /192.168.0.1/
.br
ettercap -TQP link_type //

.TP 
.B scan_poisoner
.Sp
Check if someone is poisoning between some host in the list and us.
First of all it checks if two hosts in the list have the same mac address.
It could mean that one of those is poisoning us pretending to be the other.
It could generate many false-positives in a proxy-arp environment.
You have to build hosts list to perform this check.
After that, it sends icmp echo packets to each host in the list and checks
if the source mac address of the reply differs from the address we have
stored in the list for that ip.
It could mean that someone is poisoning that host pretending to have our ip
address and forwards intercepted packets to us.
You can't perform this active test in unoffensive mode.
.Sp
.I example :
.Sp
ettercap -TQP scan_poisoner //

.TP 
.B search_promisc
.Sp
It tries to find if anyone is sniffing in promisc mode. It sends two different
kinds of malformed arp request to each target in the host list and waits for
replies. If a reply arrives from the target host, it's more or
less probable that this target has the NIC in promisc mode. It could generate false-positives.
You can launch it either from the command line or from the plugin menu.
Since it listens for arp replies it is better that you don't use it while sending
arp request. 
.Sp
.I example :
.Sp
ettercap -TQP search_promisc /192.168.0.1/
.br
ettercap -TQP search_promisc //


.TP 
.B smb_clear
.Sp
It forces the client to send smb password in clear-text by mangling protocol 
negotiation. You have to be in the "middle" of the connection to successfully
use it. It hooks the smb dissector, so you have to keep it active. 
If you use it against a windows client it will probably result in a failure. 
Try it against a *nix smbclient :)
   

.TP 
.B smb_down
.Sp
It forces the client to not to use NTLMv2 password exchange during smb 
authentication. This way, obtained hashes can be easily cracked by LC4.
You have to be in the "middle" of the connection to successfully use it.
It hooks the smb dissector, so you have to keep it active. 


.SH "SEE ALSO"
.I "ettercap(8)"
.I "ettercap_plugin(8)"
.I "etterlog(8)"
.I "etterfilter(8)"
.I "etter.conf(5)"
.LP
